{
  "uid" : "8cb962224719ca4f",
  "name" : "test_api[data2]",
  "fullName" : "testCase.test_api_all#test_api",
  "historyId" : "00e979ff4a7aace1913ab30cd4fe8694",
  "time" : {
    "start" : 1702456994815,
    "stop" : 1702456995134,
    "duration" : 319
  },
  "status" : "broken",
  "statusMessage" : "TypeError: Object of type Response is not JSON serializable",
  "statusTrace" : "data = {'前置条件': '', '是否执行': 'y', '期望结果': '', '状态码': '', ...}\n\n    @pytest.mark.parametrize('data', opExcel.getExcelData()) # 装饰器进行封装用例\n    def test_api(data):\n        if data[ExcelVarles.case_isRun] == \"N\" :\n            logger.info(\"跳过执行用例\")\n            return\n    \n        # 请求头作为空处理并添加token\n        headers = data[ExcelVarles.case_headers]\n        if len(str(headers).split()) == 0:\n            pass\n        elif len(str(headers).split()) >= 0:\n            headers = json.loads(headers) # 转换为字典\n        #     headers['Authorization'] = login_token # 获取登录返回的token并添加到读取出来的headers里面\n            headers = headers\n    \n        # 对请求参数做为空处理\n        params = data[ExcelVarles.case_data]\n        if len(str(params).split()) == 0:\n            pass\n        elif len(str(params).split()) == 0:\n            params = params\n    \n        url = data[ExcelVarles.case_server] + data[ExcelVarles.case_url] + \"?\" + params\n>       r = apiRequest.all_method( data[ExcelVarles.case_method] ,url, headers=headers)\n\ntestCase\\test_api_all.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\method.py:68: in all_method\n    return json.dumps(res, ensure_ascii=False, indent=4, sort_keys=True, separators=(',',':'))\nD:\\ProgramFiles\\Python312\\Lib\\json\\__init__.py:238: in dumps\n    **kw).encode(obj)\nD:\\ProgramFiles\\Python312\\Lib\\json\\encoder.py:202: in encode\n    chunks = list(chunks)\nD:\\ProgramFiles\\Python312\\Lib\\json\\encoder.py:439: in _iterencode\n    o = _default(o)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000002149A1A51C0>\no = <Response [200]>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type Response is not JSON serializable\n\nD:\\ProgramFiles\\Python312\\Lib\\json\\encoder.py:180: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: Object of type Response is not JSON serializable",
    "statusTrace" : "data = {'前置条件': '', '是否执行': 'y', '期望结果': '', '状态码': '', ...}\n\n    @pytest.mark.parametrize('data', opExcel.getExcelData()) # 装饰器进行封装用例\n    def test_api(data):\n        if data[ExcelVarles.case_isRun] == \"N\" :\n            logger.info(\"跳过执行用例\")\n            return\n    \n        # 请求头作为空处理并添加token\n        headers = data[ExcelVarles.case_headers]\n        if len(str(headers).split()) == 0:\n            pass\n        elif len(str(headers).split()) >= 0:\n            headers = json.loads(headers) # 转换为字典\n        #     headers['Authorization'] = login_token # 获取登录返回的token并添加到读取出来的headers里面\n            headers = headers\n    \n        # 对请求参数做为空处理\n        params = data[ExcelVarles.case_data]\n        if len(str(params).split()) == 0:\n            pass\n        elif len(str(params).split()) == 0:\n            params = params\n    \n        url = data[ExcelVarles.case_server] + data[ExcelVarles.case_url] + \"?\" + params\n>       r = apiRequest.all_method( data[ExcelVarles.case_method] ,url, headers=headers)\n\ntestCase\\test_api_all.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\method.py:68: in all_method\n    return json.dumps(res, ensure_ascii=False, indent=4, sort_keys=True, separators=(',',':'))\nD:\\ProgramFiles\\Python312\\Lib\\json\\__init__.py:238: in dumps\n    **kw).encode(obj)\nD:\\ProgramFiles\\Python312\\Lib\\json\\encoder.py:202: in encode\n    chunks = list(chunks)\nD:\\ProgramFiles\\Python312\\Lib\\json\\encoder.py:439: in _iterencode\n    o = _default(o)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000002149A1A51C0>\no = <Response [200]>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type Response is not JSON serializable\n\nD:\\ProgramFiles\\Python312\\Lib\\json\\encoder.py:180: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ea1af84ea22e93d7",
      "name" : "log",
      "source" : "ea1af84ea22e93d7.txt",
      "type" : "text/plain",
      "size" : 83
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testCase"
  }, {
    "name" : "suite",
    "value" : "test_api_all"
  }, {
    "name" : "host",
    "value" : "DESKTOP-K4I75MC"
  }, {
    "name" : "thread",
    "value" : "7536-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCase.test_api_all"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'用例ID': 'case_003', '用例模块': '百度', '用例名称': '百度', '用例地址': 'https://www.baidu.com', '请求地址': '', '请求方法': 'get', '请求类型': '', '请求参数': '', '请求头': '', '前置条件': '', '是否执行': 'y', '状态码': '', '期望结果': ''}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "8cb962224719ca4f.json",
  "parameterValues" : [ "{'用例ID': 'case_003', '用例模块': '百度', '用例名称': '百度', '用例地址': 'https://www.baidu.com', '请求地址': '', '请求方法': 'get', '请求类型': '', '请求参数': '', '请求头': '', '前置条件': '', '是否执行': 'y', '状态码': '', '期望结果': ''}" ]
}